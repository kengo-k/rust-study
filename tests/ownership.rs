#[cfg(test)]
mod tests {

    #[test]
    fn test_ownership() {
        // 数値型の代入は単純なコピーとなるため所有権の問題が発生する
        let a = 10;
        let b = a;

        // Stringは内部に可変のデータ(ヒープ領域)を持つ。
        // xをyに代入するとxが保持するヒープ領域のポインタがyにコピーされる。
        // するとxとyはヒープ領域の同じアドレスを参照するポインタを持つ。
        //
        // このときyが指すヒープ領域が解放された場合xが指すヒープ領域も
        // 同時に無効になってしまう。その後に意図せず変数xを参照すると
        // メモリエラーが発生する。
        
        // これを防ぐため所有権を持つ変数がただ一つであることをコンパイラが強制する。
        // この仕組みを所有権という。
        // 先のxとyの例で言うとxをyに代入した時点で所有権はyに移動するため
        // xへアクセスすることはできなくなる。

        // 例えば以下のコードはビルドエラーになる。
        // let x = String::from("world");
        // let y = x;
        // println!("x: {}", x);
        let x = String::from("world");
        let y = &x;
        println!("a: {}", a);
        println!("b: {}", b);
        println!("x: {}", x);
        println!("y: {}", y);
    }
}
